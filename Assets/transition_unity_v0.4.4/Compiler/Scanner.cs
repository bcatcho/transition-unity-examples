
#line 1 "Scanner.rl.cs"
// This file is AUTOGENERATED with RAGEL
// !!DO NOT EDIT!! Change the RL file and compile with Ragel
// See the ScannerGenerator directory.
// http://www.colm.net/open-source/ragel/
using System.Collections.Generic;
using Transition.Compiler.Tokens;

namespace Transition.Compiler
{
   /// <summary>
   /// Scanner performs lexical analysis on a string of characters and
   /// and emits a string of tokens for the Parser to analyze.
   /// </summary>
   public class Scanner
   {
      int _lineNumber = 0;
      bool _tokenUncommitted;
      int _tokenStart { get { return _token.StartIndex; } }
      Token _token;
      private List<Token> _tokens;

      // ragel properties
      private int eof;
      private int cs;
      private int p;

      private void StartToken(TokenType tokenType)
      {
        #if PARSER_LOGGING
        Log(string.Format("start {0}", tokenType));
        #endif
        _token = new Token {
            LineNumber = _lineNumber,
            StartIndex = p,
            TokenType = tokenType
        };
        _tokenUncommitted = true;
      }

      private void StartOperatorToken(TokenOperator tokenOperator)
      {
        #if PARSER_LOGGING
        Log(string.Format("start {0}", tokenOperator));
        #endif
        _token = new Token {
            LineNumber = _lineNumber,
            StartIndex = p,
            Operator = tokenOperator,
            TokenType = TokenType.Operator,
        };
        _tokenUncommitted = true;
      }

      #if PARSER_LOGGING
      private void Log(string msg) {
        Console.WriteLine(string.Format("{0} {1}", p, msg));
      }
      #endif

      private void EmitToken() {
        #if PARSER_LOGGING
        Log(string.Format("emit {0}", _token.TokenType));
        #endif
        _token.Length = p - _tokenStart;
        _tokens.Add(_token);
        _tokenUncommitted = false;
      }

      private void EmitNewLine() {
        _token.TokenType = TokenType.NewLine;
        #if PARSER_LOGGING
        Log(string.Format("emit {0}", _token.TokenType));
        #endif
        _tokens.Add(_token);
        _tokenUncommitted = false;
      }

      private void SetKeyword(TokenKeyword tokenKeyword) {
        _token.Keyword = tokenKeyword;
      }

      private void CommitLastToken() {
        if (_tokenUncommitted) {
          EmitToken();
        }
      }

      
#line 92 "tmp/Scanner.cs"
static readonly sbyte[] _Scanner_actions =  new sbyte [] {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 2, 1, 0, 2, 1, 
	2, 2, 1, 3, 2, 1, 5, 2, 
	6, 1
};

static readonly short[] _Scanner_key_offsets =  new short [] {
	0, 0, 13, 15, 17, 21, 30, 39, 
	40, 48, 56, 69, 75, 90, 92, 94, 
	96, 96, 101, 103, 104, 105, 106, 112, 
	123, 138, 152, 166, 181, 183, 185, 192, 
	208, 221, 234, 236, 238, 238, 240, 242, 
	242, 254, 259, 260, 268, 276, 289, 300, 
	315, 330, 345, 361, 363, 365, 365, 370, 
	375, 377, 379, 385, 385, 387, 389, 389, 
	389, 403, 410, 411, 412, 413, 414, 415, 
	416, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 425, 438, 453, 468, 483, 499, 
	514
};

static readonly char[] _Scanner_trans_keys =  new char [] {
	'\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', 
	'\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u0022', '\u005c', '\u0022', 
	'\u005c', '\u0020', '\u003a', '\u0009', '\u000d', '\u0020', '\u002d', '\u005f', 
	'\u0009', '\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u002d', 
	'\u005f', '\u0009', '\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u003e', 
	'\u0020', '\u005f', '\u0009', '\u000d', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u0020', '\u005f', '\u0009', '\u000d', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u0023', '\u005f', '\u0009', '\u000c', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u0009', '\u000c', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', 
	'\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0027', '\u005c', '\u0027', '\u005c', 
	'\u0065', '\u006d', '\u006f', '\u0072', '\u0073', '\u006e', '\u0078', '\u0074', 
	'\u0065', '\u0072', '\u000a', '\u000d', '\u0020', '\u0023', '\u0009', '\u000c', 
	'\u000a', '\u000d', '\u0020', '\u0023', '\u005f', '\u0009', '\u000c', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', 
	'\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0023', '\u002d', '\u005f', 
	'\u0009', '\u000c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u005f', 
	'\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', 
	'\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', 
	'\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u0022', '\u005c', '\u0022', 
	'\u005c', '\u000a', '\u000d', '\u0020', '\u0023', '\u003a', '\u0009', '\u000c', 
	'\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u003a', 
	'\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', '\u007a', 
	'\u000a', '\u000d', '\u0020', '\u0023', '\u005f', '\u0009', '\u000c', '\u0030', 
	'\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u0022', '\u0023', '\u0027', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u0022', '\u005c', '\u0022', '\u005c', '\u0027', '\u005c', 
	'\u0027', '\u005c', '\u0020', '\u002d', '\u003a', '\u005f', '\u0009', '\u000d', 
	'\u0030', '\u0039', '\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u002d', 
	'\u003a', '\u0009', '\u000d', '\u003e', '\u0020', '\u005f', '\u0009', '\u000d', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u0020', '\u005f', '\u0009', '\u000d', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0023', 
	'\u005f', '\u0009', '\u000c', '\u0030', '\u0039', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000a', '\u000d', '\u0020', '\u0023', '\u005f', '\u0009', '\u000c', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', 
	'\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0023', '\u002d', 
	'\u003a', '\u005f', '\u0009', '\u000c', '\u0030', '\u0039', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', 
	'\u002d', '\u003a', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', '\u002d', 
	'\u003a', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', '\u0061', 
	'\u007a', '\u0027', '\u005c', '\u0027', '\u005c', '\u0020', '\u0022', '\u0027', 
	'\u0009', '\u000d', '\u0020', '\u0022', '\u0027', '\u0009', '\u000d', '\u0022', 
	'\u005c', '\u0022', '\u005c', '\u000a', '\u000d', '\u0020', '\u0023', '\u0009', 
	'\u000c', '\u0027', '\u005c', '\u0027', '\u005c', '\u000a', '\u000d', '\u0020', 
	'\u0023', '\u002d', '\u005f', '\u0009', '\u000c', '\u0030', '\u0039', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0023', '\u002d', 
	'\u0009', '\u000c', '\u0069', '\u0074', '\u0061', '\u0063', '\u0068', '\u0069', 
	'\u006e', '\u0065', '\u006e', '\u0075', '\u006e', '\u0074', '\u0061', '\u0074', 
	'\u0065', '\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', 
	'\u0009', '\u000d', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', 
	'\u0020', '\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', 
	'\u000c', '\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', 
	'\u0022', '\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', 
	'\u0041', '\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', 
	'\u0023', '\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', 
	'\u0027', '\u002d', '\u003a', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', 
	'\u005a', '\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', 
	'\u0027', '\u002d', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', '\u000a', '\u000d', '\u0020', '\u0022', '\u0023', '\u0027', 
	'\u002d', '\u003a', '\u0040', '\u005f', '\u0009', '\u000c', '\u0041', '\u005a', 
	'\u0061', '\u007a', (char) 0
};

static readonly sbyte[] _Scanner_single_lengths =  new sbyte [] {
	0, 7, 2, 2, 2, 3, 3, 1, 
	2, 2, 5, 4, 9, 2, 2, 2, 
	0, 5, 2, 1, 1, 1, 4, 5, 
	9, 6, 8, 9, 2, 2, 5, 10, 
	5, 7, 2, 2, 0, 2, 2, 0, 
	4, 3, 1, 2, 2, 5, 5, 9, 
	7, 9, 10, 2, 2, 0, 3, 3, 
	2, 2, 4, 0, 2, 2, 0, 0, 
	6, 5, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 7, 9, 9, 9, 10, 9, 
	10
};

static readonly sbyte[] _Scanner_range_lengths =  new sbyte [] {
	0, 3, 0, 0, 1, 3, 3, 0, 
	3, 3, 4, 1, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 3, 
	3, 4, 3, 3, 0, 0, 1, 3, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	4, 1, 0, 3, 3, 4, 3, 3, 
	4, 3, 3, 0, 0, 0, 1, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	4, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3
};

static readonly short[] _Scanner_index_offsets =  new short [] {
	0, 0, 11, 14, 17, 21, 28, 35, 
	37, 43, 49, 59, 65, 78, 81, 84, 
	87, 88, 94, 97, 99, 101, 103, 109, 
	118, 131, 142, 154, 167, 170, 173, 180, 
	194, 204, 215, 218, 221, 222, 225, 228, 
	229, 238, 243, 245, 251, 257, 267, 276, 
	289, 301, 314, 328, 331, 334, 335, 340, 
	345, 348, 351, 357, 358, 361, 364, 365, 
	366, 377, 384, 386, 388, 390, 392, 394, 
	396, 398, 400, 402, 404, 406, 408, 410, 
	412, 414, 415, 426, 439, 452, 465, 479, 
	492
};

static readonly byte[] _Scanner_indicies =  new byte [] {
	0, 2, 3, 4, 5, 6, 7, 0, 
	7, 7, 1, 9, 10, 8, 12, 13, 
	11, 14, 15, 14, 1, 16, 17, 18, 
	16, 18, 18, 1, 19, 5, 7, 19, 
	7, 7, 1, 20, 1, 21, 22, 21, 
	22, 22, 1, 23, 24, 23, 24, 24, 
	1, 26, 27, 25, 28, 29, 25, 29, 
	29, 29, 1, 31, 32, 30, 3, 30, 
	1, 31, 34, 33, 2, 3, 4, 5, 
	6, 7, 33, 7, 7, 1, 31, 35, 
	3, 9, 37, 36, 12, 39, 38, 38, 
	40, 41, 42, 43, 44, 1, 45, 46, 
	1, 47, 1, 48, 1, 49, 1, 51, 
	52, 50, 28, 50, 1, 54, 55, 53, 
	3, 56, 53, 56, 56, 1, 54, 58, 
	57, 2, 3, 4, 5, 6, 59, 57, 
	59, 59, 1, 61, 62, 60, 28, 17, 
	63, 60, 63, 63, 63, 1, 65, 66, 
	64, 67, 3, 68, 5, 69, 64, 69, 
	69, 1, 65, 71, 70, 72, 3, 73, 
	5, 6, 74, 70, 74, 74, 1, 76, 
	77, 75, 79, 80, 78, 82, 83, 81, 
	3, 15, 81, 1, 82, 85, 84, 2, 
	3, 4, 5, 15, 6, 7, 84, 7, 
	7, 1, 61, 87, 86, 28, 88, 86, 
	88, 88, 88, 1, 65, 90, 89, 67, 
	3, 68, 69, 89, 69, 69, 1, 92, 
	93, 91, 25, 95, 94, 94, 92, 97, 
	96, 25, 99, 98, 98, 100, 101, 103, 
	102, 100, 102, 102, 102, 1, 104, 105, 
	106, 104, 1, 107, 1, 108, 109, 108, 
	109, 109, 1, 110, 111, 110, 111, 111, 
	1, 113, 114, 112, 28, 115, 112, 115, 
	115, 115, 1, 117, 118, 116, 3, 69, 
	116, 69, 69, 1, 117, 120, 119, 2, 
	3, 4, 5, 6, 74, 119, 74, 74, 
	1, 122, 123, 121, 28, 101, 103, 124, 
	121, 124, 124, 124, 1, 126, 127, 125, 
	67, 3, 68, 105, 106, 69, 125, 69, 
	69, 1, 126, 129, 128, 72, 3, 73, 
	105, 106, 6, 74, 128, 74, 74, 1, 
	76, 131, 130, 79, 133, 132, 132, 134, 
	135, 136, 134, 1, 137, 138, 139, 137, 
	1, 141, 142, 140, 144, 145, 143, 117, 
	118, 116, 3, 116, 1, 143, 141, 147, 
	146, 144, 149, 148, 148, 78, 26, 151, 
	150, 28, 17, 152, 150, 152, 152, 152, 
	1, 31, 154, 153, 3, 5, 153, 1, 
	155, 1, 156, 1, 157, 1, 158, 1, 
	159, 1, 160, 1, 161, 1, 162, 1, 
	163, 1, 164, 1, 165, 1, 166, 1, 
	167, 1, 168, 1, 169, 1, 11, 0, 
	2, 3, 4, 5, 6, 7, 0, 7, 
	7, 1, 31, 34, 33, 2, 3, 4, 
	5, 6, 7, 33, 7, 7, 1, 54, 
	58, 57, 2, 3, 4, 5, 6, 59, 
	57, 59, 59, 1, 65, 71, 70, 72, 
	3, 73, 5, 6, 74, 70, 74, 74, 
	1, 82, 85, 84, 2, 3, 4, 5, 
	15, 6, 7, 84, 7, 7, 1, 117, 
	120, 119, 2, 3, 4, 5, 6, 74, 
	119, 74, 74, 1, 126, 129, 128, 72, 
	3, 73, 105, 106, 6, 74, 128, 74, 
	74, 1, 0
};

static readonly sbyte[] _Scanner_trans_targs =  new sbyte [] {
	1, 0, 2, 13, 14, 7, 17, 32, 
	3, 4, 81, 3, 4, 81, 4, 5, 
	6, 7, 32, 6, 8, 9, 10, 9, 
	10, 11, 83, 11, 13, 10, 11, 83, 
	11, 12, 12, 13, 15, 16, 15, 16, 
	18, 68, 74, 75, 77, 19, 66, 20, 
	21, 22, 23, 84, 23, 23, 84, 23, 
	64, 24, 24, 25, 26, 85, 26, 25, 
	26, 85, 26, 34, 37, 40, 27, 27, 
	28, 51, 48, 29, 30, 63, 29, 30, 
	63, 30, 86, 30, 31, 31, 33, 33, 
	32, 33, 33, 35, 11, 36, 35, 36, 
	38, 39, 38, 39, 41, 42, 40, 54, 
	41, 42, 54, 43, 44, 45, 44, 45, 
	46, 87, 46, 45, 46, 87, 46, 47, 
	47, 49, 88, 49, 48, 49, 88, 49, 
	50, 50, 52, 53, 52, 53, 55, 56, 
	60, 55, 56, 60, 57, 58, 59, 57, 
	58, 59, 61, 62, 61, 62, 65, 65, 
	64, 65, 65, 67, 22, 69, 70, 71, 
	72, 73, 22, 22, 76, 22, 78, 79, 
	80, 22
};

static readonly sbyte[] _Scanner_trans_actions =  new sbyte [] {
	0, 0, 0, 0, 0, 5, 9, 11, 
	13, 39, 13, 0, 3, 0, 0, 7, 
	3, 30, 36, 0, 0, 3, 36, 0, 
	11, 3, 27, 27, 3, 0, 0, 1, 
	1, 0, 1, 1, 13, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 3, 27, 27, 0, 1, 1, 
	11, 0, 1, 11, 3, 27, 27, 0, 
	0, 1, 1, 0, 0, 11, 0, 1, 
	0, 0, 11, 13, 39, 13, 0, 3, 
	0, 0, 1, 1, 0, 1, 3, 27, 
	0, 0, 1, 13, 39, 13, 0, 0, 
	13, 13, 0, 0, 3, 30, 0, 33, 
	0, 5, 7, 0, 3, 36, 0, 11, 
	3, 27, 27, 0, 0, 1, 1, 0, 
	1, 3, 27, 27, 0, 0, 1, 1, 
	0, 1, 13, 13, 0, 0, 3, 3, 
	3, 0, 0, 0, 13, 39, 13, 0, 
	3, 0, 13, 13, 0, 0, 3, 27, 
	0, 0, 1, 0, 23, 0, 0, 0, 
	0, 0, 15, 19, 0, 25, 0, 0, 
	0, 17
};

const int Scanner_start = 82;
const int Scanner_first_final = 82;
const int Scanner_error = 0;

const int Scanner_en_main = 82;


#line 92 "Scanner.rl.cs"


      ///<summary>
      /// This method will perform lexical analysis on the character sequence input
      //  and will return a sequence of tokens for the Parser to analyze.
      ///</summary>
      ///<returns>
      /// A sequence of tokens that the Parser can use to Analyze.
      ///</returns>
      public List<Token> Scan(char[] data, int len)
      {
         
#line 369 "tmp/Scanner.cs"
	{
	cs = Scanner_start;
	}

#line 104 "Scanner.rl.cs"
         if (_tokens == null) {
           _tokens = new List<Token>(128);
         }
         _tokens.Clear();
         _lineNumber = 1; // start at line 1 like most text editors
         p = 0;
         int pe = len;
         eof = len;
         
#line 384 "tmp/Scanner.cs"
	{
	sbyte _klen;
	short _trans;
	int _acts;
	int _nacts;
	short _keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _Scanner_key_offsets[cs];
	_trans = (short)_Scanner_index_offsets[cs];

	_klen = _Scanner_single_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + _klen - 1);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + ((_upper-_lower) >> 1));
			if ( data[p] < _Scanner_trans_keys[_mid] )
				_upper = (short) (_mid - 1);
			else if ( data[p] > _Scanner_trans_keys[_mid] )
				_lower = (short) (_mid + 1);
			else {
				_trans += (short) (_mid - _keys);
				goto _match;
			}
		}
		_keys += (short) _klen;
		_trans += (short) _klen;
	}

	_klen = _Scanner_range_lengths[cs];
	if ( _klen > 0 ) {
		short _lower = _keys;
		short _mid;
		short _upper = (short) (_keys + (_klen<<1) - 2);
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = (short) (_lower + (((_upper-_lower) >> 1) & ~1));
			if ( data[p] < _Scanner_trans_keys[_mid] )
				_upper = (short) (_mid - 2);
			else if ( data[p] > _Scanner_trans_keys[_mid+1] )
				_lower = (short) (_mid + 2);
			else {
				_trans += (short)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += (short) _klen;
	}

_match:
	_trans = (short)_Scanner_indicies[_trans];
	cs = _Scanner_trans_targs[_trans];

	if ( _Scanner_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _Scanner_trans_actions[_trans];
	_nacts = _Scanner_actions[_acts++];
	while ( _nacts-- > 0 )
	{
		switch ( _Scanner_actions[_acts++] )
		{
	case 0:
#line 4 "ScannerDef.rl"
	{ _lineNumber++; EmitNewLine(); }
	break;
	case 1:
#line 5 "ScannerDef.rl"
	{ EmitToken(); }
	break;
	case 2:
#line 6 "ScannerDef.rl"
	{ StartOperatorToken(TokenOperator.Transition); }
	break;
	case 3:
#line 7 "ScannerDef.rl"
	{ StartOperatorToken(TokenOperator.Assign); }
	break;
	case 4:
#line 8 "ScannerDef.rl"
	{ StartToken(TokenType.Keyword); }
	break;
	case 5:
#line 9 "ScannerDef.rl"
	{ StartToken(TokenType.Identifier); }
	break;
	case 6:
#line 10 "ScannerDef.rl"
	{ StartToken(TokenType.Value); }
	break;
	case 7:
#line 29 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Machine); }
	break;
	case 8:
#line 30 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.State); }
	break;
	case 9:
#line 31 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.On); }
	break;
	case 10:
#line 32 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Enter); }
	break;
	case 11:
#line 33 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Exit); }
	break;
	case 12:
#line 34 "ScannerDef.rl"
	{ SetKeyword(TokenKeyword.Run); }
	break;
#line 510 "tmp/Scanner.cs"
		default: break;
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

#line 113 "Scanner.rl.cs"
         CommitLastToken();
         return _tokens;
      }

      ///<summary>
      /// Call this method after Scan to know if the parser exited prematurely
      /// due to an error.
      ///</summary>
      ///<returns>
      /// A boolean indicating if the Scanner made it to the end of the input or not.
      ///</returns>
      public bool DidReachEndOfInput()
      {
         return (p >= eof);
      }

      /// <summary>
      /// Returns the error location
      /// </summary>
      public string GetErrorLocation(char[] input, int charCount)
      {
         var end = p;
         var start = p;
         while (start > 0 && end - start < charCount && input[start] != '\n') {
            start--;
         }
         if (input[start] == '\n') {
            start++;
         }

         return "(line " + _lineNumber + "): " + new string(input, start, end - start + 1);
      }
   }
}
